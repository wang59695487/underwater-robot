
// use modified method2, detect precisely but too fast

#include "VideoProcess.hpp"
#include "LineCircleDetect.hpp"

float resultDistance = 0;
float resultAngle = 0;
int resultOutFlag = 0;
int markFlag = 0;
char markResult[4] = {0};
int detectFlag = 0;
char detectResult[8] = {0X00};

float imuAngle = 0;


int markCheck(Mat &src)
{    
	int sum =0;
	for(int i=0;i<10;i++)
	{
	    for(int j=0; j<10; j++)
		{
			if(src.at<uchar>(i,j) ==255)
			    sum++;
		}
	}
	if(sum >=4)
	    return 0;
	else
	    return -1;
}


VideoProcess::VideoProcess(){
	string modelTxt = "/home/pi/soft/flyer/lenet_train_test.prototxt";
	string modelBin = "/home/pi/soft/flyer/lenet_solver_iter_10000.caffemodel";
	net = dnn::readNetFromCaffe(modelTxt, modelBin);

	result_link_type *result_link = new result_link_type;
	result_link->head = result_link->end = NULL;
	result_link->result_num = 0;
}



void VideoProcess::frame_fetch(VideoProcess *videoProcess){
	result_link_type* result_link = videoProcess->result_link;
	while(1){
		videoProcess->cap >> videoProcess->frame;
                cout<<"get one frame!!!"<<endl;
                cout<<"frame size is :"<<videoProcess->frame.rows<<" "<<videoProcess->frame.cols<<endl;
		struct result_node_datatype *result_node = new struct result_node_datatype;
		result_node->result = videoProcess->frame;
//                imshow("frame",videoProcess->frame);
//                waitKey(30);
		result_push(result_link, result_node);
                cout<<"finish push!!!"<<endl;
		}
}
void VideoProcess::run(){
    cap.open(0);
//	std::thread  t2(frame_fetch, this);
	std::thread  t1(frame_process, this);
        t1.detach();
//        t2.detach();

}
void VideoProcess::frame_process(VideoProcess *videoProcess)
{
	result_link_type* result_link = videoProcess->result_link;
	struct result_node_datatype *result_node2 = NULL;



/// add by wwb 20190318
	ConfigFileRead configFileRead;

	int ret = configFileRead.readConfigFile("/home/pi/soft/flyer/config.cfg");

	if (ret < 0)
	{
		cout << "config file read failed, program shutdown!" << endl;
		return;
	}

	int segThresholdValue = atoi(configFileRead.readValue("segThresholdValue").c_str());
	int lineWidthValue = atoi(configFileRead.readValue("lineWidth").c_str());
	int pointNumValue = atoi(configFileRead.readValue("pointNum").c_str());

	int minDistValue = atoi(configFileRead.readValue("minDistValue").c_str());
	int minRadiusValue = atoi(configFileRead.readValue("minRadiusValue").c_str());
	int maxRadiusValue = atoi(configFileRead.readValue("maxRadiusValue").c_str());
	int circleLikeValue = atoi(configFileRead.readValue("circleLikeValue").c_str());

	int markAreaSize = atoi(configFileRead.readValue("markAreaSize").c_str());

	ret = configFileRead.closeConfigFile();
	if (ret!=0)
	{
		cout << "config file close failed, program shutdown!" << endl;
		return;
	}


	if (lineWidthValue <= 0 || pointNumValue <= 0)
	{
		cout << "params in config file are not in wright range, program shutdown!" << endl;
		return;
	}
        
        cout<<"read and close configFile success!!!"<<endl;



	int lineFindState = 0;//导航状态，0为初始状态，1为 1点->2点状态，2为2点->3点状态，3为3点->1点状态
	
	LinePointFinder pointFinder;
	CircleFinder circleFinder;


	Mat img; //原始图像
	Mat imgResize; //下采样图像

	int width = 0; //图像宽度
	int height = 0;//图像高度


	Point pointA; //拟合后的直线截断端点A
	Point pointB; //拟合后的直线截断端点B

	Point centerFind;
	int radiusFind;


//	double imuAngel = 0; //输入的惯导累计航向角，范围【-PI，PI】
	double frontAngle = 0;//目标航向角，范围【-PI，PI】
	double diffAngle = 0;//目标航向角与累计航向角的偏差角，用以计算导航直线的前后方向

	double distanceCircle = 0;

    int findLetterFlag = 0;

//	VideoCapture cap(0);	
	VideoCapture cap1(1);
	Mat imgUp;
	cap1>>imgUp;
	usleep(1000*500);
	
	/*
	 * test on camera by lzq 4.3*/
	int w=static_cast<int>(videoProcess->cap.get(CAP_PROP_FRAME_WIDTH));
    int h=static_cast<int>(videoProcess->cap.get(CAP_PROP_FRAME_HEIGHT));
    Size S(w,h);
    double fps=videoProcess->cap.get(CAP_PROP_FPS);
	//fps = 100;
    int myFourCC=VideoWriter::fourcc('m','p','4','v');
    VideoWriter shipin("./tset_4_3.avi",myFourCC,15,S,true);
    if(!shipin.isOpened())
    {
		cout << "VideoWriter open failed!" << endl;
		getchar();
		return ;
	}
    else{cout << "VideoWriter open success!" << endl;}
    

	while (1)
	{
/*
		result_node2 = result_pop(result_link);
                cout<<"image size is :"<<result_node2->result.rows<<"  "<<result_node2->result.cols<<endl;
		if (result_node2 == NULL)
		{
			std::this_thread::sleep_for(std::chrono::microseconds(30));
			continue;
		}
		imshow("frame", result_node2->result);
		if (videoProcess->first_flag == 0) {
			videoProcess->init_base_contour(videoProcess->basic_model, result_node2->result);
			videoProcess->first_flag = 1;
		}
*/
        double time0 = static_cast<double>(getTickCount());


        videoProcess->cap>>img;
        
        /*
         *  lzq 4.3*/
        //write<<img;

		cout << "lineFindState is :" << lineFindState << endl;
/*
		if(0 == videoProcess->first_flag)
		{
			videoProcess->init_base_contour(videoProcess->basic_model,img);
			videoProcess->first_flag = 1;
		}
*/
		width = img.cols;
		height = img.rows;




		resize(img, imgResize, Size(width / 2, height / 2)); //下采样为原尺寸的1/2
		//cout << "resize image size is :" << imgResize.rows << "  " << imgResize.cols << endl;

		Mat imgSegment(imgResize.rows, imgResize.cols, CV_8U); 	//分割图像

		pointFinder.setDectParams(lineFindState, lineWidthValue, pointNumValue, segThresholdValue);

		pointFinder.segmentProcess2(imgResize, imgSegment);

		ret = pointFinder.calculatePoint(imgSegment, pointA, pointB);





		if (0 == ret)
		{


			line(imgResize, pointA, pointB, Scalar(255, 0, 0), 2, 8, 0);
//			line(img, Point(pointA.x * 2, pointA.y * 2), Point(pointB.x * 2, pointB.y * 2), Scalar(255, 0, 0), 2, 8, 0);
			switch (lineFindState)
			{
			case 1:
				frontAngle = 0;
				break;
			case 2:
				frontAngle = PI / 2;
				break;
			case 3:
				frontAngle = -3 * PI / 4;
				break;
			case 4:
				frontAngle = -PI;
				break;
			default:
				frontAngle = 0;
				break;
			}

			diffAngle = frontAngle - imuAngle;
			if (diffAngle > PI)
				diffAngle = 2 * PI - diffAngle;
			if (diffAngle < -PI)
				diffAngle = 2 * PI + diffAngle;
			diffAngle = abs(diffAngle);
			//cout<<"diffAngle is : "<<diffAngle<<endl;
			//cout<<pointA.x<<" "<<pointA.y<<", "<<pointB.x<<" "<<pointB.y<<endl;
			if (diffAngle <= PI / 2)
			{
				pointFinder.calculateResult(imgResize, pointA, pointB);
			}else
			{
				pointFinder.calculateResult(imgResize, pointB, pointA);
			}
			resultDistance = pointFinder.distanceResult;
			resultAngle = pointFinder.angleResult;
			resultOutFlag = 1;
			//cout << "distance and angle is : " << pointFinder.distanceResult << " , " << pointFinder.angleResult << endl;
		}

		int circleColor=GREEN;//0;
		if(lineFindState <4)
		{
		    //switch(lineFindState)
			//{
			//	case 0:
			//	    circleColor = GREEN;
			//		break;
			//	case 1:
			//	    circleColor = BLUE;
			//		break;
			//	case 2:
			//	    circleColor = RED;
			//		break;
			//	case 3:
			//	    circleColor = GREEN;
			//		break;
			//	default:
			//	    circleColor = GREEN;
			//		break;				    
			//}
			
			Mat imageSegmentCircle(imgResize.rows, imgResize.cols, CV_8U);
			Mat imgResize2;
			Mat edge_image;
			//Mat imgResize2(imgResize.rows, imgResize.cols, CV_8U); still fails
			resize(img, imgResize2, Size(width / 2, height / 2)); //下采样为原尺寸的1/2

			circleFinder.setParams(circleColor, minDistValue, minRadiusValue, maxRadiusValue, circleLikeValue, segThresholdValue);

			circleFinder.segmentProcess2(imgResize2,imageSegmentCircle);

			//imshow("circleSegment",imageSegmentCircle);
			//ret = circleFinder.circleCalculate(imageSegmentCircle);
			//ret = circleFinder.circleCalculate(imgResize2);
			
			ret = circleFinder.circleCalculate2(imgResize2,edge_image);
			
		    if (0 == ret)
		    {
			    distanceCircle = circleFinder.circleDistance(imgResize2);
			    if (distanceCircle <= markAreaSize / 2)
			    {
				    lineFindState++;

				    String imageBaseName = "result/MarkResult_";
				    String imageName = imageBaseName + to_string(lineFindState) + ".jpg";
				    imwrite(imageName,img);
				    cout << "mark successd! the mark num is :" << lineFindState << endl;
				    //circle(imgResize,circleCenter,radius,Scalar(255),2);
				    markFlag = 1;
				    markResult[lineFindState-1] = 0X7F;
			    } 
		    }
		
		}
//		imshow("edge image", contours);
		imshow("resize", imgResize);
		//imshow("picture", img);
		imshow("segment", imgSegment);
		//imshow("Canny",edge_image);
		
		/*
		 * test on camera by lzq 4.3*/		 
		 shipin.write(img);
		 

		if(BLUE == lineFindState && !findLetterFlag)
//		if(true)
       {
		    cap1>>imgUp;
		    double start = (double)getTickCount();
		    videoProcess->data_process(imgUp,videoProcess);
		    double end = (double)getTickCount();
		    //cout<<"data_processd using time"<<(end-start)/getTickFrequency()*1000<<endl;
//		    resize(img, imgResize,Size(640,480));
            findLetterFlag = 1;
        }
        char c = waitKey(1);

		//cout<<"process one frame using time :"<<((double)getTickCount() - time0)/getTickFrequency()*1000<<endl;
	}
}
void VideoProcess::init_base_contour(vector<vector<Point>> & vec, const Mat &frame) {

	Mat src1 = Mat::zeros(frame.size(), frame.type());
	rectangle(src1, Rect(Point(100, 100), Point(frame.rows / 2, frame.rows / 2)), Scalar(255, 255, 255), -1, 8);
	Mat gray1;
	cvtColor(src1, gray1, CV_RGB2GRAY);
	vector<Vec4i> hierarchy1;
	vector<vector<Point>> Basecontour1;
	findContours(gray1, Basecontour1, hierarchy1, CV_RETR_EXTERNAL, CV_CHAIN_APPROX_SIMPLE);
	vec.push_back(Basecontour1[0]);
}

void VideoProcess::data_process(Mat &frame,VideoProcess *videoProcess) {
	dnn::Net *net = &(videoProcess->net);
	const int classfilternum = 13;
	const string alphabet[classfilternum] = { "A","B","C","D","E","F","G","H","I","J","K","L","M" };
	vector<float>test,test1;
	Mat detect_src = frame.clone();
	Mat gray;
	int frame_count = 0;
	Mat gauss;
	GaussianBlur(frame, gauss, Size(7, 7), 17);
	addWeighted(frame, 1.5, gauss, -0.5, 0, frame);
	cvtColor(frame, gray, CV_BGR2GRAY);
	GaussianBlur(gray, gray, Size(5, 5), 0, 0);
	IplImage ipl(gray);
	int thresh = otsu(&ipl);
//	cout <<"thressh is :"<<thresh << endl;
	Mat grayInv = gray.clone();
	threshold(gray, gray, 50, 255, THRESH_BINARY);
	bitwise_not(gray,grayInv);

	imshow("frame_despark", grayInv);
	vector<Vec4i> hierarchy;
	vector<vector<Point>> Basecontour, Basecontour1;
	vector<Mat> roiSets;
	findContours(grayInv, Basecontour, hierarchy, CV_RETR_EXTERNAL, CV_CHAIN_APPROX_SIMPLE);
	float Area;
	float rectArea;
	for (int i = 0; i < Basecontour.size(); i++) {
//		vector<Point> approx;
//		approxPolyDP(Basecontour[i], approx, 5, true);

		RotatedRect rectRotate = minAreaRect(Basecontour[i]);
//		Area = contourArea(approx);
		Area = contourArea(Basecontour[i]);
		rectArea = rectRotate.size.area();
		Rect rectErect = rectRotate.boundingRect();

		if ((Area >= 0.9 * rectArea) && (Area < frame.cols*frame.rows * 2 / 3) && (Area > frame.cols*frame.rows / 20 / 20)) 
		{
            if(rectErect.x<0 || rectErect.y<0)
			{
				cout<<"rectErect is not corect1!!!!!!!!!!!!!!"<<endl;
				continue;
			}

			int rightDownPOintX = rectErect.x + rectErect.width;
			int rightDownPOintY = rectErect.y + rectErect.height;

			if(rightDownPOintX >= gray.cols || rightDownPOintY >= gray.rows)
			{
				cout<<"rectErect is not corect2!!!!!!!!!!!!!!"<<endl;
				continue;
			}						
			
	
			cout<<"rect size is: "<<rectErect.x<<" "<<rectErect.y<<" "<<rectErect.width<<" "<<rectErect.height<<endl;
			Mat imgRotate = gray(rectErect);

			Mat imgRotate2;
			bitwise_not(imgRotate,imgRotate);
			imshow("imgRotate",imgRotate);

			/*
			for(int i=0;i<imgRotate.cols;i++)
			{
				for(int j=0;j<imgRotate.rows;j++)
				{
					if(i<=1 || i>=imgRotate.cols-2 || j<=1 ||j>=imgRotate.rows-2)
				    imgRotate.at<uchar>(i,j) = 0;
				}
			}
			*/
            cout<<"Rorate angle is :"<<rectRotate.angle<<endl;
			float rotateAngle = 0;
			if(abs(rectRotate.angle)>=45)
			{
				if(rectRotate.angle < 0)
				{
					rotateAngle = rectRotate.angle + 90;
				}
				else
				{
					rotateAngle = rectRotate.angle - 90;
				}
			}
			else
			{
				rotateAngle = rectRotate.angle;
			}
			Point2f centerRotate(rectErect.width/2,rectErect.height/2);
			Mat matrixAffine = getRotationMatrix2D(centerRotate,rotateAngle,1);
			warpAffine(imgRotate,imgRotate2,matrixAffine,Size(imgRotate.cols,imgRotate.rows));
			imshow("imgRotate2",imgRotate2);
//			bitwise_not(imgRotate,imgRotate);
			vector<Vec4i> hierarchyErrect;
			vector<vector<Point>> contourErrect;
			findContours(imgRotate2, contourErrect, hierarchyErrect, CV_RETR_EXTERNAL, CV_CHAIN_APPROX_SIMPLE);
			float areaBase = 0;
			int maxAreaNUm = -1;
			for(int k =0; k<contourErrect.size();k++)
			{
				if(areaBase < contourArea(contourErrect[k]))
				{
					areaBase = contourArea(contourErrect[k]);
					maxAreaNUm = k;
				}   
			}
			if(maxAreaNUm <0 || areaBase < Area*0.8)
			{
                 continue;
			}
            Rect baseRect = boundingRect(contourErrect[maxAreaNUm]);
			if(baseRect.width < 30 || baseRect.height < 30)
			{
				continue;
			}
			
			int cutSizeX = baseRect.width/20;
			int cutSizeY = baseRect.height/20;

			Rect rectRoi(baseRect.x + cutSizeX, baseRect.y + cutSizeY, baseRect.width-2*cutSizeX, baseRect.height-2*cutSizeY);
			Mat  imgRoi = imgRotate2(rectRoi);
			bitwise_not(imgRoi,imgRoi);


            
			if(imgRoi.cols> imgRoi.rows)
			{
				transpose(imgRoi,imgRoi);
				flip(imgRoi,imgRoi,0);
			}
//			imshow("imgROI",imgRoi);


			
			if(markCheck(imgRoi) < 0)
			{
				flip(imgRoi,imgRoi,-1);
				if(markCheck(imgRoi) < 0)
				{
//				    imshow("imgRoiTrans",imgRoi);
					cout<<"no mark find!!!"<<endl;
					continue;
				}
			}
			Rect rectRoiCut(0,baseRect.width/10,imgRoi.cols,imgRoi.rows -baseRect.width/5);
			Mat imgRoiCut = imgRoi(rectRoiCut);
			roiSets.push_back(imgRoiCut);
		    Basecontour1.push_back(Basecontour[i]);

		}
	}

	drawContours(detect_src, Basecontour1,-1, 255, 3);
	vector<Rect>boundRect;
	int detectNum = 0;
	for(int i = 0;i<roiSets.size();i++)
	{
		vector<Mat> imgRoiTemp;
		vector<double> probTemp;
		double maxProb= 0;
		int maxProbId = 0;
		int rotateNum = 0;
		Mat detectImg = roiSets[i].clone();
//		bitwise_not(detectImg,detectImg);
		Mat transImg;
//		transpose(detectImg,transImg);
		for(int j=0; j<1;j++)
		{
			switch(j)
			{
				case 0:
				    break;
				case 1:
				    flip(detectImg,detectImg,-1);
					break;
				default:
				    break;
			}

			imgRoiTemp.push_back(detectImg);

			Mat inputBlob = dnn::blobFromImage(detectImg, 0.00390625f, Size(28, 28), Scalar(), false); //Convert Mat to batch of images
			Mat pred;
			net->setInput(inputBlob, "data");//set the network input, "data" is the name of the input layer   
			pred = net->forward("ip2");//compute output, "prob" is the name of the output layer   

			int classId;
			double classProb;
			getMaxClass(pred, &classId, &classProb);
			cout<<"classprob is : "<<j<<" "<<classProb<<endl;
			if(classProb > maxProb)
			{
				maxProb = classProb;
				maxProbId = classId;
				rotateNum = j;
			}
			probTemp.push_back(classProb);
		}
//				imshow("detect image",imgRoiTemp[0]);
		imshow("detect image",imgRoiTemp[rotateNum]);
		cout<<"max classProb is :"<<maxProb<<endl;
		putText(detect_src, alphabet[(int)maxProbId],Basecontour1[i][0]+Point(10,0), 1, 4, Scalar(255, 0, 0), 2, 8);
	    detectResult[detectNum] = alphabet[(int)maxProbId].at(0);
		detectNum++;
		if(detectNum>=8)
		    break;
	}
	if(detectNum >0)
	    detectFlag = 1;
	else
	    detectFlag = 0;

	imwrite("result/detect.jpg",detect_src);

	imshow("detect_src", detect_src);

	char c = waitKey(1);

}

int VideoProcess::otsu(IplImage* src)
{
	int hist_size = 256;       
	int hist_height = 256;
	float range[] = { 0,255 };      
	float* ranges[] = { range };
	CvHistogram* gray_hist = cvCreateHist(1, &hist_size, CV_HIST_ARRAY, ranges, 1);
	cvCalcHist(&src, gray_hist, 0, 0);
	cvNormalizeHist(gray_hist, 1.0);

	int Width = src->width;
	int Height = src->height;
	int threshold = 0;
	double delta = 0;
	double U_t = 0;
	for (int m = 0; m < 256; m++)
	{
		U_t += cvQueryHistValue_1D(gray_hist, m)*m;
	}
	double u = 0, w = 0;
	for (int k = 0; k < 256; k++)
	{
		u += cvQueryHistValue_1D(gray_hist, k)*k;       
		w += cvQueryHistValue_1D(gray_hist, k);          

		double t = U_t * w - u;
		double delta_tmp = t * t / (w * (1 - w));

		if (delta_tmp > delta)
		{
			delta = delta_tmp;
			threshold = k;
		}
	}
	cvReleaseHist(&gray_hist);
	return threshold;
}
void VideoProcess::getMaxClass(const Mat &probBlob, int *classId, double *classProb)
{
	Mat probMat = probBlob.reshape(1, 1);
	Point classNumber;
	minMaxLoc(probMat, NULL, classProb, NULL, &classNumber);
	*classId = classNumber.x;
}
